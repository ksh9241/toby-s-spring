<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="practice" />
		<property name="password" value="1234" />	
	</bean>
		
	<bean id="userDao" class="practice.spring.toby.chapter6.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="mailSender" class="practice.spring.toby.chapter6.MockMailSender" />
	
	<!-- 데코레이터 패턴 -->
	<!-- 타깃 -->
	<bean id="userService" class="practice.spring.toby.chapter6.UserServiceImple">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean>
	
	<!-- 테스트용 UserService의 등록 -->
	<bean id="testUserService" class="practice.spring.toby.chapter6.UserServiceTest$TestUserServiceImple" parent="userService" />
	
	<bean class="org.springframework.mock.web.MockServletContext"/>

	<!-- 팩토리 빈 설정 -->
	<bean id="message" class="practice.spring.toby.chapter6.MessageFactoryBean">
		<property name="text" value="Factory Bean" />
	</bean>
	
	<tx:advice id="transactionAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 어드바이저 빈 생성 -->
 	<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice" />
		<property name="pointcut" ref="transactionPointcut" />
	</bean>
	
	<bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly,timeout_30</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<!-- 포인트 컷 빈 설정 -->
	<bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImple.upgrade*(..))" />
	</bean>
	
	<!-- aop 네임스페이스를 적용한 스프링 AOP -->
	
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
	</aop:config>
	
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
	
	<!-- ProxyFactoryBean 설정 -->
<!-- 	<bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userServiceImple" />
		<property name="interceptorNames"> 어드바이스와 어드바이저를 동시에 설정해줄 수 있는 프로퍼티. 어드바이스나 어드바이저의 빈 아디리를 값으로 넣어주면된다. 기존의 ref 애트리뷰트를 사용하는 DI와 방식이 다름에 주의해야 한다.
			<list>
				<value>transactionAdvisor</value>
			</list>
		</property>
	</bean>
 -->	
	<!-- DefaultAdvisorAutoProxyCreator 등록 -->
</beans>
